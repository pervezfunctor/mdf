#! /usr/bin/env bash

export MDF_DIR=$HOME/.mdf
export XDG_CONFIG_HOME=$HOME/.config

dir_exists() {
  [[ -d "$1" ]]
}

file_exists() {
  [[ -f "$1" ]]
}

has_cmd() {
  command -v "$1" >/dev/null 2>&1
}

slog() {
  printf '\r\033[2K  [ \033[00;32mINFO\033[0m ] %s\n' "$*"
}

fail() {
  printf '\r\033[2K  [ \033[0;31mFAIL\033[0m ] %s\n' "$*"
}

warn() {
  printf '\r\033[2K  [ \033[00;33mWARN\033[0m ] %s\n' "$*"
}

err_exit() {
  fail "$*"
  sleep 2
  exit 1
}

is_linux() {
  [[ "$OSTYPE" == "linux-gnu" ]]
}

cmd_check() {
  for cmd in "$@"; do
    has_cmd "$cmd" || warn "$cmd not installed"
  done
}

smd() {
  [ -d "$1" ] && return 1

  slog "Creating directory $1"
  mkdir -p "$1" 2>/dev/null
}

fpi() {
  for pkg in "$@"; do
    slog "Installing flatpak package $pkg"
    flatpak install -y --user flathub "$pkg"
  done
}

pixi_install() {
  has_cmd ~/.pixi/bin/pixi && return 0

  slog "Installing pixi"
  curl -fsSL https://pixi.sh/install.sh | bash
  has_cmd ~/.pixi/bin/pixi || warn "pixi not installed"
}

pi() {
  pixi global install --quiet "$@"
}

pis() {
  local pkgs=()

  for p in "$@"; do
    has_cmd "$p" || pkgs+=("$p")
  done

  pixi global install --quiet "${pkgs[@]}"
}

shell_tools_install() {
  slog "Installing essential packages with pixi"

  pis wget git unzip gh lazygit fzf tar nvim tmux starship luarocks \
    bat eza zoxide

  has_cmd trash || pi trash-cli
  has_cmd rg || pi ripgrep
  has_cmd delta || pi git-delta

  cmd_check wget git unzip gh lazygit delta fzf tar nvim tmux starship luarocks \
    bat eza zoxide
}

dotfiles_install() {
  slog "Cloning dotfiles to $MDF_DIR"

  dir_exists "$MDF_DIR" || git clone https://github.com/pervezfunctor/mdf.git "${MDF_DIR}"

  dir_exists "$MDF_DIR" || err_exit "Failed to clone dotfiles repository. Quitting."
}

shell_install() {
  slog "Configuring shell"
  # shellcheck disable=SC2016
  if ! grep -q 'source "${MDF_DIR}/shellrc"' ~/.bashrc 2>/dev/null; then
    echo "export MDF_DIR=${MDF_DIR}" >>~/.bashrc
    echo 'source "${MDF_DIR}/shellrc"' >>~/.bashrc
  fi

  if ! grep -q 'source "${MDF_DIR}/shellrc"' ~/.zshrc 2>/dev/null; then
    touch ~/.zshrc
    echo "export MDF_DIR=${MDF_DIR}" >>~/.zshrc
    echo 'source "${MDF_DIR}/shellrc"' >>~/.zshrc
  fi
}

nvim_install() {
  dir_exists "$XDG_CONFIG_HOME"/nvim && return 0

  slog "Configuring nvim with nvim kickstart"

  smd "$XDG_CONFIG_HOME"/nvim
  wget -nv https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/init.lua -O "$XDG_CONFIG_HOME"/nvim/init.lua
  dir_exists "$XDG_CONFIG_HOME"/nvim || warn "nvim configuration failed"
}

tmux_install() {
  file_exists ~/.config/tmux/tmux.conf && return 0
  smd ~/.config/tmux
  ln -s "$MDF_DIR/tmux.conf" ~/.config/tmux/tmux.conf
}

font_install() {
  file_exists ~/.local/share/fonts/JetBrainsMonoNLNerdFontPropo-Regular.ttf && return 0

  slog "Installing JetBrains Mono Nerd Font"

  smd ~/.local/share/fonts
  trash /tmp/jetbrains-mono/tmp/jetbrains-mono.zip
  wget -nv https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/JetBrainsMono.zip -O /tmp/jetbrains-mono.zip
  unzip -qq -d /tmp/jetbrains-mono -o /tmp/jetbrains-mono.zip
  cp /tmp/jetbrains-mono/*.ttf ~/.local/share/fonts
  trash /tmp/jetbrains-mono/tmp/jetbrains-mono.zip
  fc-cache -f -v
}

ptyxis_install() {
  has_cmd flatpak || return 1

  slog "Adding flathub remote"
  flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo --user

  slog "Installing Ptyxis"
  fpi app.devsuite.Ptyxis

  font_install
}

distrobox_install() {
  has_cmd distrobox && return 0

  if has_cmd podman || has_cmd docker; then
    slog "Installing distrobox"
    curl -s https://raw.githubusercontent.com/89luca89/distrobox/main/install | sh -s -- --prefix ~/.local
  fi
}

main() {
  export PATH="$HOME/.pixi/bin:$PATH"

  has_cmd curl || err_exit "curl not found. Install curl and run this script again."
  is_linux || err_exit "This script only works on Linux. Quitting."

  pixi_install
  shell_tools_install

  has_cmd git || err_exit "git not installed. Quitting."

  dotfiles_install
  shell_install

  for arg in "$@"; do
    if has_cmd "${arg}_install"; then
      "${arg}_install"
    else
      warn "Unknown argument: $arg"
    fi
  done
}

main "$@"
